type Subgraph @entity {
    id: ID!
    name: String!
    versions: [SubgraphVersion!]! @derivedFrom(field: "subgraph")
    currentVersion: SubgraphVersion
    createdAt: BigInt!
}

type SubgraphVersion @entity {
    id: ID!
    subgraph: Subgraph!
    state: SubgraphState!
    createdAt: BigInt!
}

type SubgraphState @entity {
    id: ID! # Subgraph IPFS hash
    manifest: SubgraphManifest!
    failed: Boolean!
    deployments: [SubgraphDeployment!]! @derivedFrom(field: "id")
    latestEthereumBlockHash: String!
    latestEthereumBlockNumber: BigInt!
    totalEthereumBlocksCount: BigInt!
    entityCount: BigInt! # Computed field, not stored.
}

type SubgraphDeployment @entity {
    id: ID! # Subgraph IPFS hash
    nodeId: String!
    synced: Boolean!
}

type SubgraphManifest @entity {
    id: ID!
    specVersion: String!
    description: String
    repository: String
    schema: String!
    dataSources: [EthereumContractDataSource!]!
}

type EthereumContractDataSource @entity {
    id: ID!
    kind: String!
    name: String!
    network: String
    source: EthereumContractSource!
    mapping: EthereumContractMapping!
}

type EthereumContractSource @entity {
    id: ID!
    address: String!
    abi: String!
}

type EthereumContractMapping @entity {
    id: ID!
    kind: String!
    apiVersion: String!
    language: String!
    file: String!
    entities: [String!]!
    abis: [EthereumContractAbi!]!
    eventHandlers: [EthereumContractEventHandler!]!
}

type EthereumContractAbi @entity {
    id: ID!
    name: String!
    file: String!
}

type EthereumContractEventHandler @entity {
    id: ID!
    event: String!
    handler: String!
}
